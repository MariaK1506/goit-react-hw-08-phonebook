{"version":3,"file":"static/js/50.3bf3c63e.chunk.js","mappings":"6LAGaA,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,OAAO,SAAC,IAAD,UAAmBA,M,wICEb,SAASC,IACtB,IAAMC,GAAcC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,QAAU,IACtCC,GAAeF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,QAAU,IACvCE,GAAkBH,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,QAAU,IAE1CG,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUP,EAAoB,EAApBA,KAAMQ,EAAc,EAAdA,MACtC,OAAQR,GACN,IAAK,OACH,OAAOC,EAAQO,GACjB,IAAK,QACH,OAAOL,EAASK,GAClB,IAAK,WACH,OAAOH,EAAYG,GACrB,QACE,SAYN,OACE,UAAC,IAAD,YACE,+CACA,kBAAMC,SAXW,SAAAC,GACnBA,EAAMC,iBACNd,EAASe,EAAAA,EAAAA,SAAwB,CAAEZ,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAChDH,EAAQ,IACRE,EAAS,IACTE,EAAY,KAMV,WACE,mBAAOQ,QAASrB,EAAhB,kBAEE,kBACEgB,MAAOR,EACPc,SAAUR,EACVS,GAAIvB,EACJwB,KAAK,OACLhB,KAAK,OACLiB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,mBAAON,QAASlB,EAAhB,oBAEE,kBACEa,MAAON,EACPY,SAAUR,EACVS,GAAIpB,EACJqB,KAAK,QACLhB,KAAK,QAGLmB,UAAQ,QAGZ,mBAAON,QAASjB,EAAhB,sBAEE,kBACEY,MAAOJ,EACPU,SAAUR,EACVS,GAAInB,EACJoB,KAAK,WACLhB,KAAK,WAGLmB,UAAQ,QAGZ,mBAAQH,KAAK,SAAb,8B,sDC/ED,IAkBItB,EAAS,eAAC0B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP","sources":["components/Container/Container.jsx","pages/RegisterPage.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { WrapperContainer } from './Container.styled';\n\nexport const Container = ({ children }) => {\n  return <WrapperContainer>{children}</WrapperContainer>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n","import { useState, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport authOperations from 'redux/auth/auth-operations';\nimport { Container } from 'components/Container/Container';\n\nexport default function RegisterPage() {\n  const nameInputId = useMemo(() => nanoid(), []);\n  const emailInputId = useMemo(() => nanoid(), []);\n  const passwordInputId = useMemo(() => nanoid(), []);\n\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch(authOperations.register({ name, email, password }));\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <Container>\n      <h1>Registration form</h1>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor={nameInputId}>\n          Name\n          <input\n            value={name}\n            onChange={handleChange}\n            id={nameInputId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label htmlFor={emailInputId}>\n          E-mail\n          <input\n            value={email}\n            onChange={handleChange}\n            id={emailInputId}\n            type=\"email\"\n            name=\"email\"\n            // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            // title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <label htmlFor={passwordInputId}>\n          Password\n          <input\n            value={password}\n            onChange={handleChange}\n            id={passwordInputId}\n            type=\"password\"\n            name=\"password\"\n            // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            // title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Register</button>\n      </form>\n    </Container>\n  );\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Container","children","RegisterPage","nameInputId","useMemo","nanoid","emailInputId","passwordInputId","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","handleChange","target","value","onSubmit","event","preventDefault","authOperations","htmlFor","onChange","id","type","pattern","title","required","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}