{"version":3,"file":"static/js/603.8750de29.chunk.js","mappings":"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","sources":["components/Container/Container.jsx","components/ContactForm/ContactForm.styled.jsx","redux/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","pages/ContactsPage.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { WrapperContainer } from './Container.styled';\n\nexport const Container = ({ children }) => {\n  return <WrapperContainer>{children}</WrapperContainer>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 300px;\n\n  padding: 15px;\n  border: ${props => `1px solid ${props.theme.colors.lightGray}`};\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 15px;\n\n  color: ${props => props.theme.colors.darkGray};\n`;\n\nexport const Input = styled.input`\n  padding: 11px;\n  border: ${props => `1px solid ${props.theme.colors.darkGray}`};\n  border-radius: 4px;\n\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n\n  &:focus {\n    outline: transparent;\n    border: ${props => `1px solid ${props.theme.colors.blue}`};\n  }\n`;\n\nexport const Button = styled.button`\n  min-width: 150px;\n  height: 40px;\n  border: 0px solid transparent;\n  border-radius: 4px;\n\n  color: ${props => props.theme.colors.white};\n  background-color: ${props => props.theme.colors.blue};\n\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n  opacity: 1;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    opacity: 0.8;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n","const getContacts = state => state.contacts.items;\nconst getFilter = state => state.contacts.filter;\n\nconst contactsSelectors = {\n  getContacts,\n  getFilter,\n};\n\nexport default contactsSelectors;\n","import { useState, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Form, Label, Input, Button } from './ContactForm.styled';\nimport contactsSelectors from 'redux/contacts-selectors';\nimport contactsOperations from 'redux/contacts-operations';\n\nexport default function ContactForm() {\n  const nameInputId = useMemo(() => nanoid(), []);\n  const numberInputId = useMemo(() => nanoid(), []);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const formReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const newContact = {\n      name: name,\n      number: number,\n    };\n\n    contacts.find(contact => contact?.name.toLowerCase() === name.toLowerCase())\n      ? toast.error(`${name} is already in contacts`)\n      : dispatch(contactsOperations.addContact(newContact));\n\n    toast.success('Contact is added');\n    formReset();\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Label htmlFor={nameInputId}>\n          Name\n          <Input\n            value={name}\n            onChange={handleInputChange}\n            id={nameInputId}\n            type=\"text\"\n            name=\"name\"\n            // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <Label htmlFor={numberInputId}>\n          Number\n          <Input\n            value={number}\n            onChange={handleInputChange}\n            id={numberInputId}\n            type=\"tel\"\n            name=\"number\"\n            // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            // title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 15px;\n\n  color: ${props => props.theme.colors.darkGray};\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  padding: 11px;\n  border: ${props => `1px solid ${props.theme.colors.darkGray}`};\n  border-radius: 4px;\n\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n\n  &:focus {\n    outline: transparent;\n    border: ${props => `1px solid ${props.theme.colors.blue}`};\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 350px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { Label, Input } from './Filter.styled';\nimport contactsSelectors from 'redux/contacts-selectors';\nimport changeFilter from 'redux/contactsSlice';\n\nexport const Filter = () => {\n  const filterInputId = nanoid();\n\n  const dispatch = useDispatch();\n  const filterSearch = useSelector(contactsSelectors.getFilter);\n\n  const changeFilterSearch = event => {\n    dispatch(changeFilter(event.currentTarget.value));\n  };\n\n  return (\n    <Label htmlFor={filterInputId}>\n      Find contacts by name\n      <Input\n        value={filterSearch}\n        onChange={changeFilterSearch}\n        id={filterInputId}\n        type=\"text\"\n        name=\"filter\"\n        required\n      />\n    </Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n\n  flex-basis: calc(100% / 1 - 15px);\n  padding: 15px 5px;\n  border: ${props => `1px solid ${props.theme.colors.darkGray}`};\n  border-radius: 4px;\n  text-align: center;\n\n  margin-left: 15px;\n  margin-top: 15px;\n\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  @media screen and (min-width: 768px) and (max-width: 999px) {\n    flex-basis: calc(100% / 2 - 15px);\n  }\n\n  @media screen and (min-width: 1000px) {\n    flex-basis: calc(100% / 3 - 15px);\n  }\n\n  &:hover,\n  &:focus {\n    background-color: rgb(33 150 243 / 10%);\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n\nexport const Name = styled.p`\n  color: ${props => props.theme.colors.darkGray};\n  font-weight: 500;\n`;\n\nexport const Number = styled.p`\n  margin-right: 15px;\n\n  color: ${props => props.theme.colors.black};\n  font-weight: 700;\n  text-decoration: none;\n\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    color: ${props => props.theme.colors.blue};\n    transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n\nexport const Button = styled.button`\n  min-width: 50px;\n  height: 30px;\n  border: 0px solid transparent;\n  border-radius: 4px;\n\n  color: #fff;\n  background-color: ${props => props.theme.colors.blue};\n\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n  opacity: 1;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    opacity: 0.8;\n    transition: opacity 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Item, Name, Number, Button } from './ContactItem.styled';\nimport { useDispatch } from 'react-redux';\nimport contactsOperations from 'redux/contacts-operations';\n\nexport const ContactItem = ({ contact }) => {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n\n  const removeContact = contactId => {\n    dispatch(contactsOperations.deleteContact(contactId));\n  };\n\n  return (\n    <Item key={id}>\n      <Name>{name}:</Name>\n      <Number>{number}</Number>\n      <Button onClick={() => removeContact(id)}>\n        {/* <Button onClick={() => dispatch(contactsOperations.deleteContact(id))}> */}\n        Delete\n      </Button>\n    </Item>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: -15px;\n  margin-top: -15px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useMemo, useEffect } from 'react';\n\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { List } from './ContactsList.styled';\nimport contactsSelectors from 'redux/contacts-selectors';\nimport contactsOperations from 'redux/contacts-operations';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(contactsSelectors.getContacts);\n  console.log(contacts);\n  const filter = useSelector(contactsSelectors.getFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = useMemo(() => {\n    return (\n      contacts?.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      ) ?? []\n    );\n  }, [filter, contacts]);\n\n  // console.log(filtredContacts);\n\n  // return (\n  //   <List>\n  //     {filteredContacts &&\n  //       filteredContacts.map(contact => (\n  //         <ContactItem key={contact.id} contact={contact} />\n  //       ))}\n  //   </List>\n  // );\n\n  return (\n    filteredContacts && (\n      <List>\n        {filteredContacts.map(contact => (\n          <ContactItem key={contact.id} contact={contact} />\n        ))}\n      </List>\n    )\n  );\n};\n","import { Container } from 'components/Container/Container';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\n\nexport default function ContactsPage() {\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <Filter />\n      <ContactsList />\n    </Container>\n  );\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Container","children","Form","styled","props","theme","colors","lightGray","Label","darkGray","Input","blue","Button","white","getContacts","state","contacts","items","getFilter","filter","ContactForm","nameInputId","useMemo","nanoid","numberInputId","useState","name","setName","number","setNumber","useSelector","contactsSelectors","dispatch","useDispatch","handleInputChange","event","currentTarget","value","onSubmit","preventDefault","newContact","find","contact","toLowerCase","toast","contactsOperations","htmlFor","onChange","id","type","required","Filter","filterInputId","filterSearch","changeFilter","Item","Name","Number","black","ContactItem","onClick","contactId","List","ContactsList","console","log","useEffect","filteredContacts","includes","map","ContactsPage","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}